name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: "27 19 * * *"
  push:
    branches: ["main"]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ vars.DOCKER_USER }}/PHPUtils

jobs:
  make-matrix:
    runs-on: ubuntu-latest
    outputs:
      php-versions: ${{steps.fetch.outputs.json}}
    steps:
      - name: fetch versions
        id: fetch
        run: |
          echo -n "json=" >> "$GITHUB_OUTPUT"
          curl -cv --retry 3 https://www.php.net/releases/index.php?json | \
            tee "$GITHUB_OUTPUT" >> /tmp/json
          echo -en "\nsupported=" >> "$GITHUB_OUTPUT"
          cat /tmp/json | \
            jq -c 'reduce .[].supported_versions as $item ([];. + $item)' \
            >> "$GITHUB_OUTPUT"

  make-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{steps.release.outputs.id}}
      release_url: ${{steps.release.outputs.html_url}}
      release_upload: ${{steps.release.outputs.upload_url}}
    steps:
      - name: Create draft release
        id: release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.action_ref }}
          release_name: ${{ github.action_ref }}
          prerelease: ${{github.action_ref == 'main'}}
          draft: true
          body: |
            PHPUtils
            ========
  build:
    runs-on: ubuntu-latest
    needs: [make-matrix, make-release]
    outputs:
      ids: ${{steps.build-and-push.outputs.digest}}
    strategy:
      fail-fast: false
      matrix:
        version: ${{fromJson(needs.make-matrix.outputs.php-versions)}}
        type: [cli, apache, fpm]
    name: php:${{ matrix.version }}-${{matrix.type}}
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - id: ceckout
        name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - id: setup-cosigin
        name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0
        with:
          cosign-release: "v2.2.4"

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - id: setup-buildx
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - id: login-docker
        name: Log into registry docker.io
        if: github.event_name != 'pull_request'
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: docker.io
          username: borrel01/phputils
          password: ${{ secrets.DOCKER_KEY }}

      - id: login-github
        name: Log into registry github
        if: github.event_name != 'pull_request'
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: Borrel/PHPUtils
          password: ${{ secrets.GITHUB_TOKEN }}
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: |
            docker.io/borrel01/phputils
            ghcr.io/Borrel/PHPUtils
          tags: |
            type=raw,prefix=${{matrix.type}}-${{matrix.version}},onlatest=${{github.ref == 'refs/heads/main'}}
            type=raw,prefix=${{matrix.type}}-${{matrix.version}},onlatest=${{github.ref == 'refs/heads/main'}}
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build Docker image
        id: build-and-push
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
        with:
          context: .
          pull: true
          push: ${{ github.event_name != 'pull_request' }}
          tags: borrel01/phputils:${{ matrix.version }}-${{matrix.type}},ghcr.io/Borrel/PHPUtils:${{ matrix.version }}-${{matrix.type}}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/build-${{ matrix.version }}-${{matrix.type}}.tgz
          build-args: |
            VERSION=${{ matrix.version }}
            FLAVOR=${{ matrix.type }}

      - name: upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-${{ matrix.version }}-${{matrix.type}}.tgz
          path: /tmp/build-${{ matrix.version }}-${{matrix.type}}.tgz

  create-release:
    needs: [build, make-matrix]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: create Release file
        run: |
          echo PHPUtils > Release.md
          echo ######## >> Release.md
          echo ${{needs.build.outputs.ids}} >> Release.md
      - name: get artifacts
        uses: actions/download-artifact@v4
        with:
          path: /artifacts
      - name: list artifacts
        id: artifacts
        run: |
          echo -n artifacts= >> "$GITHUB_OUTPUT"
          cd /artifacts
          ls | sed -zE 's/\n([^\n$])/,\1/g' >> "$GITHUB_OUTPUT"
          ls |
      - name: create github release
        uses: actions/create-release@v1
        with:
          tag_name: ${{github.ref}}
          release_name: test
          body: |
            PHPUtils 
            ########
            ${{steps.artifacts.outputs.artifacts}}

      - name: push docker
        run: echo fdgd

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: |
            borrel01/phputils:${{ matrix.version }}-${{matrix.type}}
            ghcr.io/borrel/phputils:${{ matrix.version }}-${{matrix.type}}
          DIGEST: ${{ needs.build.outputs.ids }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
