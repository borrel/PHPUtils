name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: "27 19 * * *"
  push:
    branches: ["main"]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ vars.DOCKER_USER }}/PHPUtils

jobs:
  make-matrix:
    runs-on: ubuntu-latest
    outputs:
      php-versions: ${{steps.fetch.outputs.supported}}
      json: ${{steps.fetch.outputs.json}}
      latest: ${{steps.fetch.outputs.latest}}
    steps:
      - name: fetch versions
        id: fetch
        run: |
          set -x

          echo -n "json=" >> "$GITHUB_OUTPUT"
          curl -cv --retry 3 https://www.php.net/releases/index.php?json | \
            tee /tmp/json >> "$GITHUB_OUTPUT"
          cat /tmp/json | jq
          echo -en "\nsupported=" >> "$GITHUB_OUTPUT"
          cat /tmp/json | \
            jq -c 'reduce .[].supported_versions as $item ([];. + $item)' \
            >> "$GITHUB_OUTPUT"
          echo -en "\nlatest=" >> "$GITHUB_OUTPUT"
          cat /tmp/json | \
            jq -c '.[keys | max].version | split(".") | ""+.[0]+"."+.[1]' \
            >> "$GITHUB_OUTPUT"
          echo >> "$GITHUB_OUTPUT"
  build-base:
    runs-on: ubuntu-latest
    needs: [make-matrix]
    strategy:
      fail-fast: false
      matrix:
        version: ${{fromJson(needs.make-matrix.outputs.php-versions)}}
        type: [cli, apache, fpm]
    permissions:
      contents: read
    steps:
      - id: checkout
        uses: actions/checkout@v4

      - id: setup-buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

      - id: build
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
        with:
          context: .
          tags: baseimage:${{matrix.version}}-${{matrix.type}}
          outputs: type=docker,dest=/tmp/baseimage-${{matrix.version}}-${{matrix.type}}.tar
          file: base.Dockerfile

      - id: upload
        uses: actions/upload-artifact@v4
        with:
          name: baseimage-${{matrix.version}}-${{matrix.type}}
          path: /tmp/baseimage-${{matrix.version}}-${{matrix.type}}.tar

  build:
    runs-on: ubuntu-latest
    needs: [make-matrix, build-base]
    outputs:
      ids: ${{steps.build-and-push.outputs.digest}}
    strategy:
      fail-fast: false
      matrix:
        version: ${{fromJson(needs.make-matrix.outputs.php-versions)}}
        type: [cli, apache, fpm]
        variant: [prod, dev]
    name: ${{format('php:{0}-{1}-{2}', matrix.version, matrix.type, matrix.variant) }}
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      # id-token: write

    steps:
      - id: ceckout
        uses: actions/checkout@v4

      - id: setup-cosigin
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0

      - id: setup-buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

      - id: login-docker
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: docker.io
          username: borrel01
          password: ${{ secrets.DOCKER_KEY }}

      - id: login-github
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: Borrel/PHPUtils
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: |
            docker.io/borrel01/phputils
            ghcr.io/Borrel/PHPUtils
          tags: |
            type=raw,value=latest,enable=${{matrix.version == fromJson(needs.make-matrix.outputs.latest) && (matrix.type == 'cli') && matrix.variant == 'prod'}}
            type=raw,value=${{matrix.type}},enable=${{matrix.version == fromJson(needs.make-matrix.outputs.latest) && matrix.variant == 'prod'}}
            type=raw,value=${{matrix.type}}-latest,enable=${{matrix.version == fromJson(needs.make-matrix.outputs.latest) && matrix.variant == 'prod'}}

            type=raw,value=${{matrix.type}}-latest-${{matrix.variant}},enable=${{(matrix.version == fromJson(needs.make-matrix.outputs.latest))}}
            type=raw,value=${{matrix.type}}-${{matrix.variant}},enable=${{(matrix.version == fromJson(needs.make-matrix.outputs.latest))}}

            type=raw,value=${{matrix.type}}-${{matrix.version}},enable=${{matrix.variant == 'prod'}}
            type=raw,value=${{matrix.type}}-${{matrix.version}}-${{matrix.variant}}

      - id: get-base
        uses: actions/download-artifact@v4
        with:
          name: baseimage-${{matrix.version}}-${{matrix.type}}
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/baseimage-${{matrix.version}}-${{matrix.type}}.tar
          docker image ls -a
      - id: build-and-push
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
        with:
          context: .
          pull: false
          push: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main'}}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ${{matrix.variant}}.Dockerfile
          build-args: |
            VERSION=${{ matrix.version }}
            FLAVOR=${{ matrix.type }}
            VARIANT=${{ matrix.variant}}

      - name: Sign the published Docker image
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.imageid }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
